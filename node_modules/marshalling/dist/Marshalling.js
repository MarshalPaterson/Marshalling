/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Marshalling", function() { return Marshalling; });
/*
 * Marshall 3.2.3
 * https://marshalpaterson.github.io/Marshall/
 * MIT License
 * Copyright (c) 2016 MarshalPaterson
 *
 * Update: 3.5
 * Added React as the VIEW for Marshall changed from ts to tsx
 * */
var Marshalling;
(function (Marshalling) {
    class Marshall {
        constructor() {
            this.engine = new Array();
        }
        static getInstance() {
            if (this.instance == null)
                this.instance = new Marshall();
            return this.instance;
        }
        addMarshallingCommand(name, o) {
            if (name != "") {
                Marshall.getInstance().engine[name] = o;
                MarshallEventDispatcher.getInstance().addListener(name, o);
            }
        }
        getMarshallingCommand(name) {
            return Marshall.getInstance().engine[name];
        }
        remove(o) {
            //TODO
            //delete this.engine.indexOf(o);
        }
    }
    Marshalling.Marshall = Marshall;
    class MarshallService {
        constructor() {
            this.url = new Array();
        }
        static getInstance() {
            if (this.instance == null)
                this.instance = new MarshallService();
            return this.instance;
        }
        add(name, url) {
            MarshallService.getInstance().url[name] = url;
        }
        get(name) {
            return MarshallService.getInstance().url[name];
        }
    }
    Marshalling.MarshallService = MarshallService;
    class MarshallDelegate {
    }
    Marshalling.MarshallDelegate = MarshallDelegate;
    class MarshallCommand {
        execute(name) {
        }
        ;
    }
    Marshalling.MarshallCommand = MarshallCommand;
    class MarshallEventDispatcher {
        constructor() {
            this.eventHandlers = {};
        }
        static getInstance() {
            if (this.instance == null)
                this.instance = new MarshallEventDispatcher();
            return this.instance;
        }
        addListener(name, handler) {
            addEventListener(name, handler);
        }
        removeEventListener(theEvent, theHandler) {
            // TODO
        }
        dispatchEvent(theEvent) {
            if (Marshall.getInstance().engine[theEvent.type])
                Marshall.getInstance().engine[theEvent.type].prototype.execute(theEvent.MarshallEvent(theEvent));
            else {
                dispatchEvent(theEvent.MarshallEvent(theEvent.data));
            }
        }
    }
    Marshalling.MarshallEventDispatcher = MarshallEventDispatcher;
    class MarshallEvent extends Object {
        MarshallEvent(e, bubbles = true, cancelable = false) {
            var ei = new Object();
            ei.bubbles = bubbles;
            ei.cancelable = cancelable;
            ei["detail"] = e.data;
            return new CustomEvent(e.type, ei);
        }
    }
    Marshalling.MarshallEvent = MarshallEvent;
    class MarshallModel extends MarshallEventDispatcher {
        static getInstance() {
            if (this.instance == null)
                this.instance = new MarshallModel();
            return this.instance;
        }
    }
    Marshalling.MarshallModel = MarshallModel;
    class MarshallLaw extends MarshallEventDispatcher {
        static getInstance() {
            if (this.instance == null)
                this.instance = new MarshallLaw();
            return this.instance;
        }
        publicOrder(id, decree, type = "text") {
            if (type.toLowerCase() === "html")
                document.getElementById(id).innerHTML = decree;
            else
                document.getElementById(id).innerText = decree;
        }
    }
    Marshalling.MarshallLaw = MarshallLaw;
    class MarshallCalling {
        static getInstance() {
            if (this.instance == null)
                this.instance = new MarshallCalling();
            return this.instance;
        }
        delegate(service, cfunc, method = "GET", params = null) {
            var xhttp = new XMLHttpRequest();
            if ("POST" === method.toUpperCase() && params) {
                xhttp.open(method, service, true);
                xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xhttp.send(params);
            }
            else {
                xhttp.open(method, service, true);
                xhttp.send();
            }
            xhttp.onreadystatechange = () => {
                "use strict";
                if (xhttp.readyState === 4 && xhttp.status === 200) {
                    cfunc(xhttp.responseText);
                }
            };
        }
        load(e, html, div) {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function (e) {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    document.getElementById(div).innerHTML = xhr.responseText;
                }
            };
            xhr.open("GET", html, true);
            xhr.setRequestHeader('Content-type', 'text/html');
            xhr.send();
        }
    }
    Marshalling.MarshallCalling = MarshallCalling;
})(Marshalling || (Marshalling = {}));


/***/ })
/******/ ]);
//# sourceMappingURL=Marshalling.js.map